version: '2.4'

x-mastermind-environment:
  &default-mastermind-env
  - GLOBAL_SECRET_KEY=${GLOBAL_SECRET_KEY}
  - POSTGRESQL_HOST=waldur-db
  - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  - REDIS_HOST=waldur-queue
  - REDIS_PASSWORD=${REDIS_PASSWORD}
  - LOGGING_LOG_FILE=/var/log/waldur/core.log
  - EVENTS_LOG_FILE=/var/log/waldur/events.log
  - GLOBAL_DEFAULT_FROM_EMAIL=${GLOBAL_DEFAULT_FROM_EMAIL}
  - SENTRY_DSN=${SENTRY_DSN}
  - GLOBAL_DEBUG=false

x-mastermind-volumes:
  &default-mastermind-volumes
  - ${CONFIG_FOLDER}/waldur-mastermind/override.conf.py:/etc/waldur/override.conf.py
  - ${CONFIG_FOLDER}/waldur-mastermind/saml2.conf.py:/etc/waldur/saml2.conf.py
  - ${CONFIG_FOLDER}/waldur-mastermind/id_rsa:/etc/waldur/id_rsa
  - ${CONFIG_FOLDER}/waldur-mastermind/id_rsa.pub:/etc/waldur/id_rsa.pub
  - ${CONFIG_FOLDER}/waldur-mastermind/saml2/credentials:/etc/waldur/saml2/credentials
  - ${CONFIG_FOLDER}/waldur-mastermind/saml2/metadata:/etc/waldur/saml2/metadata
  - ${CONFIG_FOLDER}/waldur-mastermind/valimo:/etc/waldur/valimo
  - ${CONFIG_FOLDER}/waldur-mastermind/templates:/etc/waldur/templates
  - ${LOG_FOLDER}:/var/log/waldur
  - ${LIB_FOLDER}:/var/lib/waldur

services:
  # PostgreSQL
  waldur-db:
    container_name: waldur-db
    image: 'postgres:12'
    user: root
    environment:
      - POSTGRES_USER=waldur
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRES_DB=waldur
    volumes:
      - "./pgsql:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waldur"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Redis
  waldur-queue:
    container_name: waldur-queue
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  # DB migration
  waldur-mastermind-db-migration:
    container_name: waldur-mastermind-db-migration
    image: 'opennode/waldur-mastermind:${WALDUR_MASTERMIND_IMAGE_TAG}'
    environment: *default-mastermind-env
    volumes: *default-mastermind-volumes
    depends_on:
      waldur-db:
        condition: service_healthy
      waldur-queue:
        condition: service_started
    command: initdb

  # Celery
  waldur-mastermind-worker:
    container_name: waldur-mastermind-worker
    image: 'opennode/waldur-mastermind:${WALDUR_MASTERMIND_IMAGE_TAG}'
    environment: *default-mastermind-env
    volumes: *default-mastermind-volumes
    depends_on:
      waldur-db:
        condition: service_healthy
      waldur-queue:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "celery -A waldur_core.server inspect ping"]
      interval: 30s
      timeout: 30s
      retries: 3
    command: worker

  # Celery-beat
  waldur-mastermind-beat:
    container_name: waldur-mastermind-beat
    image: 'opennode/waldur-mastermind:${WALDUR_MASTERMIND_IMAGE_TAG}'
    environment: *default-mastermind-env
    volumes: *default-mastermind-volumes
    depends_on:
      waldur-db:
        condition: service_healthy
      waldur-mastermind-worker:
        condition: service_started
    command: beat

  # MasterMind API
  waldur-mastermind-api:
    container_name: waldur-mastermind-api
    image: 'opennode/waldur-mastermind:${WALDUR_MASTERMIND_IMAGE_TAG}'
    environment: *default-mastermind-env
    volumes: *default-mastermind-volumes
    depends_on:
      waldur-mastermind-worker:
        condition: service_started
      waldur-mastermind-beat:
        condition: service_started
      waldur-db:
        condition: service_healthy
      waldur-queue:
        condition: service_started
    command: mastermind

  # HomePort
  waldur-homeport:
    container_name: waldur-homeport
    image: 'opennode/waldur-homeport:${WALDUR_HOMEPORT_IMAGE_TAG}'
    environment:
      - API_URL=${WALDUR_PROTOCOL}://${WALDUR_DOMAIN}:${WALDUR_PUBLIC_PORT}/
    volumes:
      - ${CONFIG_FOLDER}/waldur-homeport/config.template.json:/usr/share/nginx/config.template.json
      - ${CONFIG_FOLDER}/waldur-homeport/opt/waldur-homeport:/opt/waldur-homeport
      - ${CONFIG_FOLDER}/waldur-homeport/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      waldur-db:
        condition: service_healthy
      waldur-mastermind-api:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://waldur-homeport/ || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Proxy
  nginx-proxy:
    container_name: nginx-proxy
    image: 'nginx:1.18.0-alpine'
    ports:
      - '${WALDUR_INTERNAL_PORT}:80'
    environment:
      - VIRTUAL_HOST=${WALDUR_DOMAIN}
    volumes:
      - ./proxy-default.conf.template:/etc/nginx/templates/default.conf.template
      - ./csp_headers.template:/etc/nginx/templates/csp_headers.template
    depends_on:
      waldur-homeport:
        condition: service_healthy
