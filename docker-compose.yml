version: '2.4'

x-mastermind-environment:
  &default-mastermind-env
  - GLOBAL_SECRET_KEY=${GLOBAL_SECRET_KEY}
  - POSTGRESQL_HOST=waldur-db
  - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  - REDIS_HOST=waldur-queue
  - REDIS_PASSWORD=${REDIS_PASSWORD}
  - GLOBAL_DEFAULT_FROM_EMAIL=${GLOBAL_DEFAULT_FROM_EMAIL}
  - SENTRY_DSN=${SENTRY_DSN}
  - GLOBAL_DEBUG=${GLOBAL_DEBUG}
  - KEYCLOAK_SECRET=${KEYCLOAK_SECRET}

x-mastermind-volumes:
  &default-mastermind-volumes
  - ${CONFIG_FOLDER}/waldur-mastermind/override.conf.py:/etc/waldur/override.conf.py
  - ${CONFIG_FOLDER}/waldur-mastermind/logging.conf.py:/etc/waldur/logging.conf.py
  - ${CONFIG_FOLDER}/waldur-mastermind/beat:/usr/local/bin/beat
  - ${CONFIG_FOLDER}/waldur-mastermind/worker:/usr/local/bin/worker
  - ${CONFIG_FOLDER}/waldur-mastermind/uwsgi.ini:/etc/waldur/uwsgi.ini
  - ${CONFIG_FOLDER}/waldur-mastermind/saml2.conf.py:/etc/waldur/saml2.conf.py
  - ${CONFIG_FOLDER}/waldur-mastermind/id_rsa:/etc/waldur/id_rsa
  - ${CONFIG_FOLDER}/waldur-mastermind/id_rsa.pub:/etc/waldur/id_rsa.pub
  - ${CONFIG_FOLDER}/waldur-mastermind/saml2/credentials:/etc/waldur/saml2/credentials
  - ${CONFIG_FOLDER}/waldur-mastermind/saml2/metadata:/etc/waldur/saml2/metadata
  - ${CONFIG_FOLDER}/waldur-mastermind/valimo:/etc/waldur/valimo
  - ${CONFIG_FOLDER}/waldur-mastermind/templates:/etc/waldur/templates
  - ${LIB_FOLDER}:/var/lib/waldur
  - /var/run/docker.sock:/var/run/docker.sock
  - /dev/shm/waldur-script-launchzone:/dev/shm/waldur-script-launchzone

services:
  # PostgreSQL
  waldur-db:
    container_name: waldur-db
    image: '${DOCKER_REGISTRY_PREFIX}library/postgres:12'
    user: root
    environment:
      - POSTGRES_USER=waldur
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRES_DB=waldur
    volumes:
      - "./pgsql:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waldur"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always

  # Redis
  waldur-queue:
    container_name: waldur-queue
    image: '${DOCKER_REGISTRY_PREFIX}bitnami/redis:latest'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always

  # DB migration
  waldur-mastermind-db-migration:
    container_name: waldur-mastermind-db-migration
    image: '${DOCKER_REGISTRY_PREFIX}opennode/waldur-mastermind:${WALDUR_MASTERMIND_IMAGE_TAG}'
    environment: *default-mastermind-env
    volumes: *default-mastermind-volumes
    depends_on:
      waldur-db:
        condition: service_healthy
      waldur-queue:
        condition: service_started
    command: initdb

  # Celery
  waldur-mastermind-worker:
    container_name: waldur-mastermind-worker
    image: '${DOCKER_REGISTRY_PREFIX}opennode/waldur-mastermind:${WALDUR_MASTERMIND_IMAGE_TAG}'
    environment: *default-mastermind-env
    volumes: *default-mastermind-volumes
    depends_on:
      waldur-db:
        condition: service_healthy
      waldur-queue:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "celery -A waldur_core.server inspect ping"]
      interval: 30s
      timeout: 30s
      retries: 3
    command: worker
    restart: always

  # Celery-beat
  waldur-mastermind-beat:
    container_name: waldur-mastermind-beat
    image: '${DOCKER_REGISTRY_PREFIX}opennode/waldur-mastermind:${WALDUR_MASTERMIND_IMAGE_TAG}'
    environment: *default-mastermind-env
    volumes: *default-mastermind-volumes
    depends_on:
      waldur-db:
        condition: service_healthy
      waldur-mastermind-worker:
        condition: service_started
    command: beat
    restart: always

  # MasterMind API
  waldur-mastermind-api:
    container_name: waldur-mastermind-api
    image: '${DOCKER_REGISTRY_PREFIX}opennode/waldur-mastermind:${WALDUR_MASTERMIND_IMAGE_TAG}'
    environment: *default-mastermind-env
    volumes: *default-mastermind-volumes
    depends_on:
      waldur-mastermind-worker:
        condition: service_started
      waldur-mastermind-beat:
        condition: service_started
      waldur-db:
        condition: service_healthy
      waldur-queue:
        condition: service_started
    command: mastermind
    restart: always

  # HomePort
  waldur-homeport:
    container_name: waldur-homeport
    image: '${DOCKER_REGISTRY_PREFIX}opennode/waldur-homeport:${WALDUR_HOMEPORT_IMAGE_TAG}'
    environment:
      - API_URL=https://${WALDUR_DOMAIN:-localhost}/
      - TITLE=${WALDUR_TITLE:-"Waldur | Cloud Service Management"}
    volumes:
      - ${CONFIG_FOLDER}/waldur-homeport/config.template.json:/usr/share/nginx/config.template.json
      - ${CONFIG_FOLDER}/waldur-homeport/opt/waldur-homeport:/opt/waldur-homeport
      - ${CONFIG_FOLDER}/waldur-homeport/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      waldur-db:
        condition: service_healthy
      waldur-mastermind-api:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://waldur-homeport/ || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always


  # HTTP Router
  caddy-router:
    container_name: caddy
    image: '${DOCKER_REGISTRY_PREFIX}library/caddy:2'
    ports:
      - '${WALDUR_HTTP_PORT:-80}:80'
      - '${WALDUR_HTTPS_PORT:-443}:443'
    environment:
      - VIRTUAL_HOST=${WALDUR_DOMAIN:-localhost}
      - TLS=${TLS:-"certs@waldur.com"}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./config/caddy-includes/:/etc/caddy-includes
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      waldur-homeport:
        condition: service_healthy
    restart: always


  keycloak:
    container_name: keycloak
    image: 'quay.io/keycloak/keycloak:15.0.2'
    restart: always
    environment:
      - KEYCLOAK_FRONTEND_URL=https://${WALDUR_DOMAIN}/auth
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_IMPORT=/tmp/realm.json
    volumes:
      - keycloak_data:/opt/jboss/keycloak/standalone/data
      - ./config/keycloak/realm.json:/tmp/realm.json

  logger:
    image: umputun/docker-logger
    container_name: "logger"
    hostname: "logger"
    restart: always
    logging:
      driver: json-file
      options:
          max-size: "10m"
          max-file: "5"
    environment:
        - LOG_FILES=true
        - LOG_SYSLOG=false
        - MAX_FILES=10
        - MAX_SIZE=50
        - MAX_AGE=365
        - MIX_ERR=true
        - DEBUG=false
        - INCLUDE=waldur-db,waldur-queue,waldur-mastermind-db-migration,waldur-mastermind-worker,waldur-mastermind-beat,waldur-mastermind-api,waldur-homeport,caddy,keycloak
    volumes:
        - ${LOG_FOLDER}:/srv/logs
        - /var/run/docker.sock:/var/run/docker.sock

volumes:
  caddy_data:
  caddy_config:
  keycloak_data:
